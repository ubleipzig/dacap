#!/usr/bin/env node

const debug = require('debug')('dacap');
const pjson = require('../package.json');
const path = require('path');
const Server = require('../lib/server').Server;

const storagePath = process.env.data_dir || path.resolve(process.cwd(), 'data');
const proxyPath = process.env.proxy_path || '/ep/';
const proxyPort = parseInt(process.env.proxy_port) || 3000;
const proxyUrl = process.env.proxy_url || `http://localhost:${proxyPort}`;
const defaultTtl = parseInt(process.env.cache_ttl) || 600;
const defaultCheckPeriod = parseInt(process.env.default_check_period) || 60;
const defaultArrayValueSize = parseInt(process.env.array_value_size) || 40;
const defaultObjectValueSize = parseInt(process.env.object_value_size) || 80;
const autosaveInterval = parseInt(process.env.autosave_interval) || 60;
const registerName = process.env.register_name || 'api-cache';
const stripPath = !(process.env.strip_path == 'false');

const server = new Server({
	storagePath: storagePath,
	proxyPath: proxyPath,
	proxyUrl: proxyUrl,
	defaultTtl: defaultTtl,
	defaultCheckPeriod: defaultCheckPeriod,
	defaultArrayValueSize: defaultArrayValueSize,
	defaultObjectValueSize: defaultObjectValueSize,
	autosaveInterval: autosaveInterval,
	registerName: registerName,
	stripPath: stripPath
});

server.listen(proxyPort, () => {
	debug('server up and running');
});